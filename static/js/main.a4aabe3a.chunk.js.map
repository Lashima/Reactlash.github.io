{"version":3,"sources":["userResizeObserver.js","usePrevious.js","brush.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","usePrevious","value","useRef","BrushChart","data","svgRef","wrapperRef","selection","setSelection","previousSelection","svg","select","getBoundingClientRect","width","height","xScale","scaleLinear","domain","length","range","yScale","max","lineGenerator","line","x","d","index","y","curve","curveCardinal","selectAll","join","attr","xAxis","axisBottom","call","yAxis","axisLeft","brush","brushX","extent","on","event","indexSelection","map","invert","move","Fragment","style","marginBottom","className","filter","App","setData","myline","title","scroll","class","onClick","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAoBeA,EAjBW,SAAAC,GAAQ,IAAD,EACKC,mBAAS,MADd,mBACxBC,EADwB,KACZC,EADY,KAc/B,OAZAC,qBAAU,WACR,IAAMC,EAAgBL,EAAIM,QACpBC,EAAiB,IAAIC,KAAe,SAAAC,GACxCA,EAAQC,SAAQ,SAAAC,GACdR,EAAcQ,EAAMC,mBAIxB,OADAL,EAAeM,QAAQR,GAChB,WACLE,EAAeO,UAAUT,MAE1B,CAACL,IACGE,GCRMa,MARf,SAAqBC,GACnB,IAAMhB,EAAMiB,mBAIZ,OAHAb,qBAAU,WACRJ,EAAIM,QAAUU,KAEThB,EAAIM,SC+GEY,MArGf,YAA+B,IAATC,EAAQ,EAARA,KACdC,EAASH,mBACTI,EAAaJ,mBACbf,EAAaH,EAAkBsB,GAHT,EAIMpB,mBAAS,CAAC,EAAG,MAJnB,mBAIrBqB,EAJqB,KAIVC,EAJU,KAKtBC,EAAoBT,EAAYO,GA0EtC,OAxEAlB,qBAAU,WACR,IAAMqB,EAAMC,YAAON,EAAOd,SADZ,EAGZJ,GAAcmB,EAAWf,QAAQqB,wBAD3BC,EAFM,EAENA,MAAOC,EAFD,EAECA,OAGTC,EAASC,cACZC,OAAO,CAAC,EAAGb,EAAKc,OAAS,IACzBC,MAAM,CAAC,EAAGN,IAEPO,EAASJ,cACZC,OAAO,CAAC,EAAGI,YAAIjB,KACfe,MAAM,CAACL,EAAQ,IAEZQ,EAAgBC,cACnBC,GAAE,SAACC,EAAGC,GAAJ,OAAcX,EAAOW,MACvBC,GAAE,SAAAF,GAAC,OAAIL,EAAOK,MACdG,MAAMC,KAETnB,EACGoB,UAAU,WACV1B,KAAK,CAACA,IACN2B,KAAK,QACLC,KAAK,QAAS,UACdA,KAAK,SAAU,SACfA,KAAK,OAAQ,QACbA,KAAK,IAAKV,GAEbZ,EACGoB,UAAU,UACV1B,KAAKA,GACL2B,KAAK,UACLC,KAAK,QAAS,SACdA,KAAK,SAAU,SACfA,KAAK,KAAK,SAAC/B,EAAOyB,GAAR,OACTA,GAASnB,EAAU,IAAMmB,GAASnB,EAAU,GAAK,EAAI,KAEtDyB,KAAK,QAAQ,SAAC/B,EAAOyB,GAAR,OACZA,GAASnB,EAAU,IAAMmB,GAASnB,EAAU,GAAK,SAAW,WAE7DyB,KAAK,MAAM,SAAC/B,EAAOyB,GAAR,OAAkBX,EAAOW,MACpCM,KAAK,KAAMZ,GAGd,IAAMa,EAAQC,YAAWnB,GACzBL,EACGC,OAAO,WACPqB,KAAK,YAFR,uBAEqClB,EAFrC,MAGGqB,KAAKF,GAER,IAAMG,EAAQC,YAASjB,GACvBV,EAAIC,OAAO,WAAWwB,KAAKC,GAE3B,IAAME,EAAQC,cACXC,OAAO,CACN,CAAC,EAAG,GACJ,CAAC3B,EAAOC,KAET2B,GAAG,mBAAmB,WACrB,GAAIC,IAAMnC,UAAW,CACnB,IAAMoC,EAAiBD,IAAMnC,UAAUqC,IAAI7B,EAAO8B,QAClDrC,EAAamC,OAIflC,IAAsBF,GACxBG,EACGC,OAAO,UACPwB,KAAKG,GACLH,KAAKG,EAAMQ,KAAMvC,EAAUqC,IAAI7B,MAEnC,CAACX,EAAMjB,EAAYsB,EAAmBF,IAGvC,kBAAC,IAAMwC,SAAP,KACE,yBAAK9D,IAAKqB,EAAY0C,MAAO,CAAEC,aAAc,SAC3C,yBAAKhE,IAAKoB,GACR,uBAAG6C,UAAU,WACb,uBAAGA,UAAU,WACb,uBAAGA,UAAU,YAGjB,2BAAOF,MAAO,CAAEC,aAAc,SAA9B,qBAEG7C,EACE+C,QACC,SAAClD,EAAOyB,GAAR,OAAkBA,GAASnB,EAAU,IAAMmB,GAASnB,EAAU,MAE/DwB,KAAK,MANV,OC7CSqB,MAnDf,WAAgB,IAAD,EACWlE,mBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,KADpC,mBACNkB,EADM,KACAiD,EADA,KAILhD,EAAOH,mBAgBf,OAfEb,qBAAU,WACN,IAAMqB,EAAIC,YAAON,EAAOd,SAClB+D,EAAO/B,cACZC,GAAE,SAACvB,EAAMyB,GAAP,OAAqB,GAANA,KACjBC,GAAE,SAAA1B,GAAK,OAAE,IAAIA,KACb2B,MAAMC,KAEPnB,EACCoB,UAAU,QACV1B,KAAK,CAACA,IACN2B,KAAK,QACLC,KAAK,KAAI,SAAA/B,GAAK,OAAEqD,EAAOrD,MACvB+B,KAAK,OAAO,QACZA,KAAK,SAAS,UACjB,CAAC5B,IAIP,yBAAK8C,UAAU,oBACX,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQK,MAAM,OAAOC,QAAM,IAG3B,kBAAC,SAAD,CAAQD,MAAM,SAGd,kBAAC,UAAD,KACA,yBAAKL,UAAU,iBACX,yBAAKO,MAAM,SACT,0CACF,yBAAKxE,IAAKoB,IAAc,6BAC5B,8BAEA,6BACA,yBAAKoD,MAAM,SACT,2CACF,kBAAC,EAAD,CAAYrD,KAAMA,IAAQ,6BAC5B,4BAAQsD,QAxCW,kBACrBL,EAAQ,GAAD,mBAAKjD,GAAL,CAAWuD,KAAKC,MAAsB,IAAhBD,KAAKE,eAuChC,YACA,4BAAQH,QAAS,kBAAIL,EAAQjD,EAAKwC,KAAI,SAAA3C,GAAK,OAAEA,EAAM,QAAnD,UACE,4BAAQyD,QAAS,kBAAIL,EAAQjD,EAAK+C,QAAO,SAAAlD,GAAK,OAAEA,EAAM,SAAtD,eCxCY6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCPNC,IAASC,OACP,kBAAC,IAAD,KAAe,kBAAC,EAAD,OACfC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4aabe3a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;","import { useEffect, useRef } from \"react\";\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default usePrevious;","import React, { useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  select,\r\n  scaleLinear,\r\n  line,\r\n  max,\r\n  curveCardinal,\r\n  axisBottom,\r\n  axisLeft,\r\n  brushX,\r\n  event\r\n} from \"d3\";\r\nimport useResizeObserver from \"./userResizeObserver\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\n\r\nfunction BrushChart({ data }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  const [selection, setSelection] = useState([0, 1.5]);\r\n  const previousSelection = usePrevious(selection);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n    const xScale = scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, width]);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, max(data)])\r\n      .range([height, 0]);\r\n\r\n    const lineGenerator = line()\r\n      .x((d, index) => xScale(index))\r\n      .y(d => yScale(d))\r\n      .curve(curveCardinal);\r\n\r\n    svg\r\n      .selectAll(\".myLine\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"myLine\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"d\", lineGenerator);\r\n\r\n    svg\r\n      .selectAll(\".myDot\")\r\n      .data(data)\r\n      .join(\"circle\")\r\n      .attr(\"class\", \"myDot\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"r\", (value, index) =>\r\n        index >= selection[0] && index <= selection[1] ? 4 : 2\r\n      )\r\n      .attr(\"fill\", (value, index) =>\r\n        index >= selection[0] && index <= selection[1] ? \"orange\" : \"black\"\r\n      )\r\n      .attr(\"cx\", (value, index) => xScale(index))\r\n      .attr(\"cy\", yScale);\r\n\r\n  \r\n    const xAxis = axisBottom(xScale);\r\n    svg\r\n      .select(\".x-axis\")\r\n      .attr(\"transform\", `translate(0, ${height})`)\r\n      .call(xAxis);\r\n\r\n    const yAxis = axisLeft(yScale);\r\n    svg.select(\".y-axis\").call(yAxis);\r\n\r\n    const brush = brushX()\r\n      .extent([\r\n        [0, 0],\r\n        [width, height]\r\n      ])\r\n      .on(\"start brush end\", () => {\r\n        if (event.selection) {\r\n          const indexSelection = event.selection.map(xScale.invert);\r\n          setSelection(indexSelection);\r\n        }\r\n      });\r\n\r\n    if (previousSelection === selection) {\r\n      svg\r\n        .select(\".brush\")\r\n        .call(brush)\r\n        .call(brush.move, selection.map(xScale));\r\n    }\r\n  }, [data, dimensions, previousSelection, selection]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n        <svg ref={svgRef}>\r\n          <g className=\"x-axis\" />\r\n          <g className=\"y-axis\" />\r\n          <g className=\"brush\" />\r\n        </svg>\r\n      </div>\r\n      <small style={{ marginBottom: \"1rem\" }}>\r\n        Selected values: [\r\n        {data\r\n          .filter(\r\n            (value, index) => index >= selection[0] && index <= selection[1]\r\n          )\r\n          .join(\", \")}\r\n        ]\r\n      </small>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BrushChart;","import './App.css';\nimport {Layout,Header,Content,Drawer}from 'react-mdl';\nimport React, {useRef,useEffect,useState } from 'react';\nimport {select, line,curveCardinal} from 'd3';\nimport BrushChart from \"./brush\";\n\n\n\nfunction App() {\n  const [data, setData] = useState([25,30,45,60,65,75]);\n  const onAddDataClick = () =>\n    setData([...data, Math.round(Math.random() * 100)]);\n    const svgRef=useRef();\n    useEffect(()=>{\n        const svg=select(svgRef.current);\n        const myline=line()\n        .x((value,index)=>index*50)\n        .y(value=>150-value)\n        .curve(curveCardinal);\n\n        svg\n        .selectAll(\"path\")\n        .data([data])\n        .join(\"path\")\n        .attr(\"d\",value=>myline(value))\n        .attr(\"fill\",\"none\")\n        .attr(\"stroke\",\"blue\");\n    },[data]);\n  return (\n    \n    \n<div className=\"demo-big-content\">\n    <Layout>\n        <Header title=\"LASH\" scroll>\n            \n        </Header>\n        <Drawer title=\"LASH\">\n            \n        </Drawer>\n        <Content>\n        <div className=\"page-content\" />\n            <div class=\"first\">\n              <h1>Line Graph</h1>\n            <svg ref={svgRef}></svg><br/>\n        <br/>\n        </div>\n        <br/>\n        <div class=\"secnd\">\n          <h1>Using Brush</h1>\n        <BrushChart data={data} /><br/>\n      <button onClick={onAddDataClick}>Add data</button>\n      <button onClick={()=>setData(data.map(value=>value+5))}>Update</button>\n        <button onClick={()=>setData(data.filter(value=>value<35))}>Filter</button>\n      </div>\n        </Content>\n    </Layout>\n</div>\n  )\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}